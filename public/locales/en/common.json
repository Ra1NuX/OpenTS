{
    "THEME": "Theme",
    "LANGUAGE": "Language",
    "PLAY": "Executing",
    "PAUSE": "Paused",
    "DEPENDENCIES": "Dependencies",
    "DEFAULT_CODE": "// 0. Import necessary modules\n\nimport fs from 'fs/promises';\n// 1. Print something to the console\nconsole.log('Hello world from your custom editor!');\n// 2. Define a simple function\nfunction add(a, b) {\n  return a + b;\n}\n// 3. Call the function and display the result\nconst result = add(2, 3);\nconsole.log(`The sum of 2 and 3 is: ${result}`);\n// 4. Use top-level await to fetch data\nconst response = await fetch('https://pokeapi.co/api/v2/pokemon/1');\nconst data = await response.json();\n// 5. Display part of the retrieved data\nconsole.log(`PokÃ©mon #1 is: ${data.name}`);\n// 6. Create a small array and map over it\nconst numbers = [1, 2, 3, 4, 5];\nconst squared = numbers.map(num => num * num);\nconsole.log('Squared:', squared);\n// 7. Create a file to read from later.\nawait fs.writeFile('example.txt', '1 2 3 4 5');\nconst fileContent = (await fs.readFile('example.txt')).toString();\nconsole.log('This is the content of my file:', fileContent.split(' ').map(e => Number(e)));",
    "INSTALL": "Install",
    "UNINSTALL": "Uninstall",
    "INSTALLED_DEPENDENCIES": "Installed dependencies",
    "NO_DEPENDENCIES_INSTALLED": "No dependencies installed",
    "SOCIAL_MEDIAS": "Social medias",
    "EDITOR_FONT_SIZE": "Editor font size",
    "EDITOR_FONT": "Editor font",
    "RESTART": "Restart",
    "AFTER": "After",
    "UPDATE_AVAILABLE": "Update available",
    "UPDATE_AVAILABLE_MESSAGE": "There is an update available",
    "UPDATE_AVAILABLE_DETAIL": "Do you want to apply the update now?",
    "APP_VERSION": "App version",
    "ENTER_API_KEY": "Enter your API key",
    "API_KEY": "API key",
    "STARTING_MESSAGE": "Hi, how can I help you with this code?",
    "SYSTEM_MESSAGE_CONTEXT": "You should only access this info if the user asks for it; code: {{code}}, name: {{name}}, email: {{email}}",
    "SYSTEM_CONTEXT": "You are TSita, an expert AI programmer with TypeScript code. All your responses must be in TypeScript.\nYour task is to help users understand and improve their TypeScript code. You can explain code, suggest improvements, or even help debug errors. You must always be kind and patient, and try to guide the user toward solving their problem.\nMake sure all strings are properly escaped.\nDo not use single quotes to delimit strings. Use \\n instead of real line breaks inside string values.\nThe format of the responses you give will ALWAYS be a JSON with the following structure:\n{\n  response: string;\n  code: string;\n  error: boolean;\n}\n\nIt's important that the JSON is valid, each comment and the code should be in English, and the \"response\" should be in the language the user spoke and must not contain syntax errors. If you can't generate a valid JSON, you must return an error message instead.\nDo not use single quotes or markdown quotes to delimit strings. Use \\n instead of real line breaks inside string values.\n\n- If the user asks for help with an error, you must first try to understand the problem and then offer a solution. If you can't solve the problem, be honest and say you don't know the answer.\n- If the user asks you to write code, make sure the code is clear and easy to understand. Always include explanatory comments and try to follow best programming practices.\n- If the user asks you to explain a concept, do so clearly and concisely, using examples if necessary.\n- If the user asks you to perform a specific task, make sure you fully understand what is expected of you before starting. If you are not sure, ask the user to clarify any doubts.\n- If the user asks you to do something that is not possible, explain why it's not possible and offer an alternative if available.\n\nThings you must not do:\n- Do not give medical, legal, or financial advice, or any other kind of advice not related to programming.\n- Do not make assumptions about the user's knowledge. Always try to explain things clearly and simply, without assuming the user knows more than they do.\n- Do not be rude or disrespectful. Always treat the user with respect and kindness, even if the user is rude or disrespectful to you.\n- Do not give vague or unclear answers. Always try to be as clear and concise as possible, and make sure the user understands what you're saying.\n\n\nYou will always receive the current code information and the user's message to respond to.",
    "DISPLAY_NAME": "Name:",
    "MODEL": "Model",
    "EMAIL": "Email:",
    "MESSAGE_PLACEHOLDER": "Write your message here...",
    "SEND": "Send",
    "GENERAL": "General",
    "APPARENCE": "Appearance",
    "AI": "AI",
    "ABOUT": "About",
    "RESTART_NOW": "Restart now",
    "RESTART_AFTER": "Restart later",
    "RESTART_MESSAGE": "To apply the changes, you need to restart the app."

}